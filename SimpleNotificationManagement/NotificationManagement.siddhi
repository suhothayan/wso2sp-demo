@App:name('NotificationManagement')
@App:description('Streaming App for Notification Management')

@source(type = 'kafka',
	topic.list = 'shipment-info', bootstrap.servers = 'localhost:9092', group.id = 'test', threading.option = 'single.thread', is.binary.message = 'true',
	@map(type = 'avro'))
define stream ShipmentInfoStream (orderId string, buyerId string, shipmentType string);

@sink( type = 'http-request', publisher.url = 'http://localhost:8080/delivery-info/',
	method = 'POST', headers = "'Content-Type:application/json'", sink.id = "delivery-info",
	@map(type = 'json'))
define stream ShipmentAndBuyerInfoSteam (orderId string, name string, address string, email string, shipmentType string);

@source(type = 'http-response', sink.id = 'delivery-info',
	@map(type = 'json',
		@attributes(orderId = 'trp:orderId', name = 'trp:name', address = 'trp:address', email = 'trp:email', shipmentType = 'trp:shipmentType', deliveryDate = "$.event.deliveryDate")))
@sink(type = 'log')
@sink(ref = 'email-sink', subject = 'Order {{orderId}} shipped', to = '{{email}}', content.type = 'text/html',
	@map(type = 'text',
		@payload("""
			Hi {{name}}, <br/><br/>
			Your order ID {{orderId}} has been shipped to <br/><b>{{address}}, </b> <br/>
			and it is expected to arrive at your doorstep on {{deliveryDate}}. <br/><br/>
			For more information please contact sales. <br/><br/>
			Thank you""")))
define stream DeliveryInfoResponceStream (orderId string, name string, address string, email string, shipmentType string, deliveryDate string);

@primaryKey('id')
@store(type = 'rdbms', datasource = 'WSO2_TEST_DB')
define table BuyerInfoTable (id string, name string, address string, email string);

@info(name = 'EnrichBuyerInformation')
from ShipmentInfoStream as s join BuyerInfoTable as b
 	on s.buyerId == b.id
select s.orderId, b.name, b.address, b.email, s.shipmentType
insert into ShipmentAndBuyerInfoSteam;
